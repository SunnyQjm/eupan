{"version":3,"sources":["js/container/UploadContainer.js"],"names":["__webpack_exports__","connect","state","Object","_home_mingj_WebstormProjects_eupan_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","UploadReducer","dispatch","selectFile","paths","type","ACTION_TYPE_UPLOAD_SELECT_FILE","data","handleChange","name","value","ACTION_TYPE_UPLOAD_OPTIONS_CHANGE","updateState","ACTION_TYPE_UPDATE_STATE","uploadFile","_uploadFile2","_home_mingj_WebstormProjects_eupan_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_mingj_WebstormProjects_eupan_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","files","params","_loop","i","wrap","_context2","prev","next","ACTION_TYPE_BEGIN_UPLOAD","paramBody","_context","getUploadParamBody","sent","progress","ACTION_TYPE_UPLOAD_PROGRESS","toFixed","index","then","ACTION_TYPE_UPLOAD_SUCCESS","catch","err","ACTION_TYPE_UPLOAD_ERR","stop","this","length","delegateYield","_x","_x2","apply","arguments","UploadPage"],"mappings":"0KAwBAA,EAAA,QAAeC,YACX,SAACC,GACG,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAD,EAAMG,gBAGjB,SAACC,GACG,MAAO,CACHC,WAAY,SAACC,GACTF,EAAS,CACLG,KAAMC,IACNC,KAAMH,KAGdI,aAAc,SAACC,EAAMC,GACjB,IAAIH,EAAO,GACXA,EAAKE,GAAQC,EACbR,EAAS,CACLG,KAAMM,IACNJ,KAAMA,KAGdK,YAAa,SAACL,GACVL,EAAS,CACLG,KAAMQ,IACNN,KAAMA,KAGdO,WAAU,eAAAC,EAAAhB,OAAAiB,EAAA,EAAAjB,CAAAkB,EAAAC,EAAAC,KAAE,SAAAC,EAAOC,EAAOC,GAAd,IAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACR1B,EAAS,CACLG,KAAMwB,MAFFN,EAAAN,EAAAC,EAAAC,KAAA,SAAAI,EAICC,GAJD,IAAAM,EAAA,OAAAb,EAAAC,EAAAO,KAAA,SAAAM,GAAA,cAAAA,EAAAJ,KAAAI,EAAAH,MAAA,cAAAG,EAAAH,KAAA,EAKkBI,YAAmBX,EAAMG,GAAIF,GAL/C,OAKAQ,EALAC,EAAAE,KAMJnB,YAAWO,EAAMG,GAAIM,EAAW,SAAAI,GAC5BhC,EAAS,CACLG,KAAM8B,IACN5B,KAAM2B,EAASE,QAAQ,GACvBC,MAAOb,MAEZc,KAAK,SAAA/B,GACJL,EAAS,CACLG,KAAMkC,IACNF,MAAOb,EACPjB,KAAMA,MAEXiC,MAAM,SAAAC,GACLvC,EAAS,CACLG,KAAMqC,IACNnC,KAAMkC,MArBV,wBAAAV,EAAAY,SAAApB,EAAAqB,QAICpB,EAAI,EAJL,YAIQA,EAAIH,EAAMwB,QAJlB,CAAAnB,EAAAE,KAAA,eAAAF,EAAAoB,cAAAvB,EAICC,GAJD,eAI0BA,IAJ1BE,EAAAE,KAAA,gCAAAF,EAAAiB,SAAAvB,EAAAwB,SAAF,gBAAAG,EAAAC,GAAA,OAAAjC,EAAAkC,MAAAL,KAAAM,YAAA,KA5BtB,CAwDEC","file":"static/js/15.fe417ee9.chunk.js","sourcesContent":["import {\n    connect\n} from 'react-redux';\nimport {\n    UploadPage\n} from '../components'\nimport {\n    ACTION_TYPE_UPLOAD_SELECT_FILE,\n    ACTION_TYPE_UPLOAD_OPTIONS_CHANGE,\n    ACTION_TYPE_UPDATE_STATE,\n    ACTION_TYPE_UPLOAD_PROGRESS,\n    ACTION_TYPE_UPLOAD_ERR,\n    ACTION_TYPE_UPLOAD_SUCCESS,\n    ACTION_TYPE_BEGIN_UPLOAD,\n} from '../model/ActionType'\n\nimport {\n    uploadFile\n} from '../model/EupanApi'\n\nimport {\n    getUploadParamBody\n} from '../model/EupanApi'\n\nexport default connect(\n    (state) => {\n        return {\n            ...state.UploadReducer\n        }\n    },\n    (dispatch) => {\n        return {\n            selectFile: (paths) => {\n                dispatch({\n                    type: ACTION_TYPE_UPLOAD_SELECT_FILE,\n                    data: paths,\n                });\n            },\n            handleChange: (name, value) => {\n                let data = {};\n                data[name] = value;\n                dispatch({\n                    type: ACTION_TYPE_UPLOAD_OPTIONS_CHANGE,\n                    data: data\n                });\n            },\n            updateState: (data) => {\n                dispatch({\n                    type: ACTION_TYPE_UPDATE_STATE,\n                    data: data\n                })\n            },\n            uploadFile: async (files, params) => {\n                dispatch({\n                    type: ACTION_TYPE_BEGIN_UPLOAD,\n                });\n                for (let i = 0; i < files.length; i++) {\n                    let paramBody = await getUploadParamBody(files[i], params);\n                    uploadFile(files[i], paramBody, progress => {       //进度回调\n                        dispatch({\n                            type: ACTION_TYPE_UPLOAD_PROGRESS,\n                            data: progress.toFixed(2),\n                            index: i\n                        });\n                    }).then(data => {\n                        dispatch({\n                            type: ACTION_TYPE_UPLOAD_SUCCESS,\n                            index: i,\n                            data: data,\n                        })\n                    }).catch(err => {\n                        dispatch({\n                            type: ACTION_TYPE_UPLOAD_ERR,\n                            data: err,\n                        });\n                    });\n                }\n            }\n        }\n    },\n)(UploadPage)"],"sourceRoot":""}